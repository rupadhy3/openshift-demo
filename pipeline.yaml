apiVersion: v1
kind: BuildConfig
metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: demo-pipeline
spec:
    triggers:
      - type: GitHub
        github:
          secret: "secret101"
      - type: Generic
        generic:
          secret: "secret101"
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: knowledge_event
        jenkinsfile: |-
          pipeline {
            agent any
              stages {
                stage('Create Image Builder') {
                  when {
                    expression {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          return !openshift.selector("bc", "phpdemo").exists();
                        }
                      }
                    }
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          openshift.newBuild("--name=phpdemo", "php:7.0~https://github.com/rupadhy3/phpdemo.git")
                        }
                      }
                    }
                  }
                }
                stage('Build Image') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          openshift.selector("bc", "phpdemo").startBuild("--wait=true")
                        }
                      }
                    }
                  }
                }
                stage('Create APP') {
                  when {
                    expression {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          return !openshift.selector('dc', 'tasks').exists()
                        }
                      }
                    }
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          def app = openshift.newApp("php~https://github.com/rupadhy3/phpdemo.git")
                          app.narrow("svc").expose();

                          def dc = openshift.selector("dc", "tasks")
                          while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                          }
                          openshift.set("triggers", "dc/phpdemo", "--manual")
                        }
                      }
                    }
                  }
                }
                stage('Deploy APP') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject(env.DEV_PROJECT) {
                          openshift.selector("dc", "demo").rollout().latest();
                        }
                      }
                    }
                  }
                }
              }
            }
